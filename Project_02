from __future__ import division, print_function
from keras.callbacks import ModelCheckpoint
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers.core import Dense, Dropout
from keras.utils import np_utils
import numpy as np 
import os

BATCH_SIZE = 128
NUM_EPOCHS = 20
VERBOSE = 1

MODEL_DIR = "/tmp"

(X_train, Y_train), (X_test, Y_test) = mnist.load_data()
X_train = X_train.reshape(60000, 784).astype('float32') / 255
X_test = X_test.reshape(10000, 784).astype('float32') / 255
Y_train = np_utils.to_categorical(Y_train, 10)
Y_test = np_utils.to_categorical(Y_test, 10)
print(X_train.shape, X_test.shape, Y_train.shape, Y_test.shape)

model = Sequential()
model.add(Dense(512, input_shape = (784, ), activation='relu'))
model.add(Dropout(0.005))
model.add(Dense(512, activation='relu'))
model.add(Dropout(0.005))
model.add(Dense(10, activation="softmax"))

model.compile(optimizer='rmsprop', 
    loss='categorical_crossentropy', 
    metrics='accuracy')

checkpoint = ModelCheckpoint(filepath=os.path.join(MODEL_DIR, "model-{epoch:02d}.h5"))
model.fit(X_train, Y_train, batch_size=BATCH_SIZE, epochs=NUM_EPOCHS, validation_split=0.1, callbacks=[checkpoint])

# Оценка результатов обучения
print(X_train.shape[0], 'train samples')
print(X_test.shape[0], 'test samples')
score = model.evaluate(X_test, Y_test, verbose=VERBOSE)
print("Test score: ", score[0])
print("Test accuracy: ", score[1])
