from keras.datasets import cifar10
from keras.utils import np_utils
from keras.models import Sequential
from keras.layers.core import Dense, Dropout, Activation, Flatten
from keras.layers.convolutional import Conv2D, MaxPooling2D
from keras.optimizers import SGD, Adam, RMSprop
import matplotlib.pyplot as plt

# Набор CIFAR_10 содержит 60к изображений 32х32 с 3 каналом
IMG_CHANNELS = 3
IMG_ROWS = 32
IMG_COLS = 32

# Константы
BATCH_SIZE = 128
NB_EPOCH = 20
NB_CLASSES = 10
VERBOSE = 1
VALIDATION_SPLIT = 0.2
OPTIM = RMSprop()

# Загрузка данных
(x_train, y_train), (x_test, y_test) = cifar10.load_data()
print('X_train shape: ', x_train.shape)
print(x_train.shape[0], ' train sample')
print(x_test.shape[0], ' test sample')

# Преобразовать к категориальному виду
y_train = np_utils.to_categorical(y_train, NB_CLASSES)
y_test = np_utils.to_categorical(y_test, NB_CLASSES)

# Преобразовать к формату с плавующей точкой и нормировать
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255

# Сеть
model = Sequential()
model.add(Conv2D(32,(3,3), padding='same'))
input_shape = (IMG_ROWS, IMG_COLS, IMG_CHANNELS)
model.add(Activation("relu"))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0,25))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation("relu"))
model.add(Dropout(0.5))
model.add(Dense(NB_CLASSES))
model.add(Activation("softmax"))
model.summary()

# Обучение
model.compile(loss='categorical_crossentropy', optimizer=OPTIM,
              metrics=['accuracy'])
model.fit(x_train, y_train,
          batch_size=BATCH_SIZE,
          epochs=NB_EPOCH,
          validation_split=VALIDATION_SPLIT,
          verbose=VERBOSE)
score = model.evaluate(x_test,y_test,
                       batch_size=BATCH_SIZE,
                       verbose=VERBOSE)
print("Test score: ", score[0])
print("Test accuracy: ", score[1])

# Сохранение архетиктуры

model_join = model.to_json()
open('cifar10_architecture.join'.write(model_join))
#  веса, вычисленные результаты обучения сети
model.save_weights('cifar10_weights.h5', overwrite=True)
